#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

from app.backend.database import init_db, AsyncSessionLocal, UserDB, RoleEnum
from app.backend.services import task_service
from app.backend.models import TaskCreate, TaskStatus, Priority
from app.backend.auth import hash_password, CurrentUser
from sqlalchemy import select


async def create_test_users(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    test_users = [
        {
            "username": "admin",
            "password": "admin123",
            "role": RoleEnum.ADMIN,
            "should_exist": True  # –ê–¥–º–∏–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ ensure_admin
        },
        {
            "username": "user1",
            "password": "user123",
            "role": RoleEnum.USER
        },
        {
            "username": "user2",
            "password": "user456",
            "role": RoleEnum.USER
        }
    ]
    
    created_users = []
    for user_data in test_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await db.execute(
            select(UserDB).where(UserDB.username == user_data["username"])
        )
        existing = result.scalar_one_or_none()
        
        if existing:
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_data['username']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—â–µ–Ω)")
            created_users.append(existing)
        else:
            new_user = UserDB(
                username=user_data["username"],
                hashed_password=hash_password(user_data["password"]),
                role=user_data["role"]
            )
            db.add(new_user)
            await db.commit()
            await db.refresh(new_user)
            created_users.append(new_user)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} (—Ä–æ–ª—å: {user_data['role'].value})")
    
    print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(created_users)}\n")
    return created_users


async def create_test_tasks(db, users):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin = next((u for u in users if u.role == RoleEnum.ADMIN), None)
    regular_users = [u for u in users if u.role == RoleEnum.USER]
    
    if not admin:
        print("  ‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_tasks = [
        TaskCreate(
            title="–ò–∑—É—á–∏—Ç—å FastAPI",
            description="–ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ FastAPI",
            status=TaskStatus.COMPLETED,
            priority=Priority.HIGH
        ),
        TaskCreate(
            title="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å SQLite",
            description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            status=TaskStatus.IN_PROGRESS,
            priority=Priority.MEDIUM
        ),
        TaskCreate(
            title="–î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
            description="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ",
            status=TaskStatus.CREATED,
            priority=Priority.HIGH
        ),
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_tasks_template = [
        TaskCreate(
            title="–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã",
            description="–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            status=TaskStatus.IN_PROGRESS,
            priority=Priority.MEDIUM
        ),
        TaskCreate(
            title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            description="–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API",
            status=TaskStatus.CREATED,
            priority=Priority.LOW
        ),
        TaskCreate(
            title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
            description="–ù–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API endpoints",
            status=TaskStatus.CREATED,
            priority=Priority.MEDIUM
        )
    ]
    
    created_tasks = []
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_user = CurrentUser(id=admin.id, username=admin.username, role=admin.role)
    for task_data in admin_tasks:
        try:
            task = await task_service.create_task(db, task_data, admin_user)
            created_tasks.append(task)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {admin.username}: {task.title}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_data.title}' –¥–ª—è {admin.username}: {e}")
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user in regular_users:
        user_obj = CurrentUser(id=user.id, username=user.username, role=user.role)
        for task_data in user_tasks_template:
            try:
                task = await task_service.create_task(db, task_data, user_obj)
                created_tasks.append(task)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {user.username}: {task.title}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_data.title}' –¥–ª—è {user.username}: {e}")
    
    print(f"\n–°–æ–∑–¥–∞–Ω–æ {len(created_tasks)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á!")
    return created_tasks


async def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        result = await db.execute(select(UserDB))
        users = result.scalars().all()
        
        total_tasks = 0
        for user in users:
            user_obj = CurrentUser(id=user.id, username=user.username, role=user.role)
            tasks = await task_service.get_tasks(db, current_user=user_obj)
            total_tasks += len(tasks)
            print(f"  {user.username} ({user.role.value}): {len(tasks)} –∑–∞–¥–∞—á")
        
        print(f"\n  –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ: {total_tasks}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç –≤—Å–µ)
        admin = next((u for u in users if u.role == RoleEnum.ADMIN), None)
        if admin:
            admin_obj = CurrentUser(id=admin.id, username=admin.username, role=admin.role)
            all_tasks = await task_service.get_tasks(db, current_user=admin_obj)
            print(f"\n  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞):")
            for status in TaskStatus:
                count = sum(1 for t in all_tasks if t.status == status)
                print(f"    {status.value}: {count} –∑–∞–¥–∞—á")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows
    if sys.platform == "win32":
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö TaskManager")
    print("=" * 50)
    
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
        
        async with AsyncSessionLocal() as db:
            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await create_test_users(db)
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            tasks = await create_test_tasks(db, users)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_statistics()
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print("   - admin / admin123 (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)")
        print("   - user1 / user123 (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")
        print("   - user2 / user456 (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("   uv run taskmanager")
        print("   –∏–ª–∏")
        print("   uv run python app/scripts/run_app.py")
        
    except Exception as e:
        import traceback
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
